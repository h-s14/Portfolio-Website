name: Deploy

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  prepare:
    runs-on: ubuntu-latest
    if: github.actor != 'github-actions[bot]'
    outputs:
      version: ${{ steps.read_version.outputs.version }}
      description: ${{ steps.get_commit_description.outputs.description }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Set up pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 10.18.3

      - name: Verify pnpm
        run: pnpm --version

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Get commit description
        id: get_commit_description
        run: |
          desc=$(git log -1 --pretty=%B | tr -d '\r')
          echo "description<<EOF" >> "$GITHUB_OUTPUT"
          echo "$desc" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

      - name: Increment package version
        run: pnpm version patch --no-git-tag-version

      - name: Read package version
        id: read_version
        run: |
          version=$(node -p "require('./package.json').version")
          echo "version=$version" >> "$GITHUB_OUTPUT"
          echo "VERSION=$version" >> "$GITHUB_ENV"

      - name: Commit version bump
        env:
          VERSION: ${{ steps.read_version.outputs.version }}
        run: |
          if git diff --quiet; then
            echo "No version changes to commit"
          else
            git config user.name "github-actions"
            git config user.email "github-actions@github.com"
            git add package.json pnpm-lock.yaml
            git commit -m "chore: bump version to $VERSION"
            git push origin HEAD:main
          fi

  docker:
    runs-on: ubuntu-latest
    needs: prepare
    if: github.actor != 'github-actions[bot]'
    steps:
      - uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Determine Docker image
        id: determine_image
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          GITHUB_OWNER: ${{ github.repository_owner }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          package_name=$(jq -r '.name // empty' package.json)
          if [ -z "$package_name" ]; then
            package_name=${GITHUB_REPOSITORY#*/}
          fi
          package_name=${package_name#@}
          package_name=${package_name//[^a-zA-Z0-9._-]/-}

          username=${DOCKER_USERNAME:-${GITHUB_OWNER:-${GITHUB_REPOSITORY%%/*}}}
          username=${username#@}
          username=$(echo "$username" | tr '[:upper:]' '[:lower:]')

          if [ -z "$username" ] || [ -z "$package_name" ]; then
            echo "Unable to determine Docker repository" >&2
            exit 1
          fi

          repository="$username/$package_name"
          echo "repository=$repository" >> "$GITHUB_OUTPUT"

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.determine_image.outputs.repository }}:${{ needs.prepare.outputs.version }}
          cache-from: type=registry,ref=${{ steps.determine_image.outputs.repository }}:buildcache
          cache-to: type=registry,ref=${{ steps.determine_image.outputs.repository }}:buildcache,mode=max

      - name: Create Git tag
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag ${{ needs.prepare.outputs.version }}
          git push origin ${{ needs.prepare.outputs.version }}
